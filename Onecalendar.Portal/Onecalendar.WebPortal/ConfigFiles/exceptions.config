<?xml version="1.0" encoding="utf-8" ?>
<!-- Exception Handling Configuration, please pay attention to the format -->
<!-- 
    Take note that there are the following values of postHandlingAction:
    1. None              - Indicates that no rethrow should occur.   
    2. NotifyRethrow     - Notify the caller that a rethrow is recommended.   
    3. ThrowNewException - Throws the exception after the exception has been handled by all handlers in the chain.   
    
	And you can specify placeholders in the 'template' attribute of exception handlers:
	1. {Message} 
	2. {Type}
	3. {StackTrace}
	4. {Source}
	5. {DateTime} - Replace the placeholder with syste date time, formated in long date time format based on application's culture.
	6. {HelpLink}
 -->
<exceptionHandling>
  <exceptionPolicies>
    <!-- 
        Global Policy should be used to handle unhandled exceptions. Generally, it'll show a messagebox and log the errors.
	    -->
    <add name="Global Policy">
      <exceptionTypes>
        <add type="System.Exception, mscorlib"
             postHandlingAction="None"
             name="Exception">
          <exceptionHandlers>
            <add logCategory="Default"
                 eventId="100"
                 severity="Error"
                 title=".Net Sample Exception Handling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 priority="0"
                 type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                 name="Logging Handler"/>
          </exceptionHandlers>
        </add>
      </exceptionTypes>
    </add>
	  
    <add name="UI Policy">
      <exceptionTypes>
        <add type="System.ArgumentException, mscorlib"
             postHandlingAction="None"
             name="ArgumentException">
          <exceptionHandlers>
            <add name="TextControl Handler"
                 type="NCS.IConnect.ExceptionHandling.WebTextControlExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 controlName="[Page].[Master].LabelMessage"
                 includeInnerException="true"
                 template="Please kindly Take Note:&#xA;                Message:{message}&#xA;                Type:{type}&#xA;                StackTrace:{stackTrace}&#xA;                Source:{source}&#xA;                DateTime:{dateTime}&#xA;                HelpLink:{helpLink}&#xA;                "/>
          </exceptionHandlers>
        </add>
        <add type="System.ArgumentNullException, mscorlib"
             postHandlingAction="None"
             name="ArgumentNullException">
          <exceptionHandlers>
            <add name="TextControl Handler"
                 type="NCS.IConnect.ExceptionHandling.WebTextControlExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 controlName="[Page].[Master].LabelMessage"
                 template="Error:{message}"/>
          </exceptionHandlers>
        </add>
        <add type="System.Configuration.Provider.ProviderException, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
             postHandlingAction="None"
             name="ProviderException">
          <exceptionHandlers>
            <add name="TextControl Handler"
                 type="NCS.IConnect.ExceptionHandling.WebTextControlExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 controlName="[Page].[Master].LabelMessage"
                 includeInnerException="true"
                 template="Please kindly Take Note:&#xA;                Message:{message}&#xA;                Type:{type}&#xA;                StackTrace:{stackTrace}&#xA;                Source:{source}&#xA;                DateTime:{dateTime}&#xA;                HelpLink:{helpLink}&#xA;                "/>
          </exceptionHandlers>
        </add>
        <add type="System.Security.SecurityException, mscorlib"
             postHandlingAction="None"
             name="SecurityException">
          <exceptionHandlers>
            <add name="Alert Handler"
                 type="NCS.IConnect.ExceptionHandling.AlertExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 caption="Error"
                 includeInnerException="true"
                 template="Please kindly Take Note:
Message:{message}
Type:{type}
StackTrace:{stackTrace}
Source:{source}
DateTime:{dateTime}
HelpLink:{helpLink}
                         "/>
          </exceptionHandlers>
        </add>
        <add type="NCS.IConnect.Security.SecurityProviderException, NCS.IConnect.Security"
             postHandlingAction="None"
             name="SecurityProviderException">
          <exceptionHandlers>
            <add name="TextControl Handler"
                 type="NCS.IConnect.ExceptionHandling.WebTextControlExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 controlName="[Page].[Master].LabelMessage"
                 template="{message}"/>
          </exceptionHandlers>
        </add>
        <add type="NCS.IConnect.CodeTable.CodeTableProviderException, NCS.IConnect.CodeTable"
             postHandlingAction="None"
             name="CodeTableProviderException">
          <exceptionHandlers>
            <add name="TextControl Handler"
                 type="NCS.IConnect.ExceptionHandling.WebTextControlExceptionHandler, NCS.IConnect.ExceptionHandling"
                 formatterType="NCS.IConnect.ExceptionHandling.TextExceptionFormatter, NCS.IConnect.ExceptionHandling"
                 controlName="[Page].[Master].LabelMessage"
                 template="{message}" />
          </exceptionHandlers>
        </add>
      </exceptionTypes>
    </add>
  </exceptionPolicies>
</exceptionHandling>